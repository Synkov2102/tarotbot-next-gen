import { Injectable, Logger } from '@nestjs/common';
import TelegramBot from 'node-telegram-bot-api';
import { AiProviderBrand } from 'src/ai/ai.interface';
import { AiService } from 'src/ai/ai.service';
import { TarotService } from 'src/tarot/tarot.service';

@Injectable()
export class TelegramBotService {
  private token = process.env.TELEGRAM_BOT_TOKEN;
  private bot: TelegramBot;

  constructor(
    private aiService: AiService,
    private readonly tarotService: TarotService,
  ) {
    if (!this.token) {
      throw new Error('TELEGRAM_BOT_TOKEN environment variable is not set');
    }
    this.bot = new TelegramBot(this.token, { polling: true });
    this.initializeHandlers();
  }

  private initializeHandlers() {
    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    this.bot.on('message', this.handleMessage.bind(this));
  }

  private async handleCallbackQuery(callbackQuery: TelegramBot.CallbackQuery) {
    console.log(callbackQuery);
  }

  private async handleMessage(msg: TelegramBot.Message) {
    const chatId = msg.chat.id;
    const text = msg.text ?? '';

    if (text === '/start') {
      await this.bot.sendMessage(
        chatId,
        `üîÆ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–∞—Ä–æ–ª–æ–≥.\n\n` +
          `–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–æ–≤–µ–¥—É —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ —Ç—Ä—ë—Ö –∫–∞—Ä—Ç –¢–∞—Ä–æ, ` +
          `—á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n` +
          `‚Ä¢ "–ß—Ç–æ –º–µ–Ω—è –∂–¥—ë—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü?"\n` +
          `‚Ä¢ "–ö–∞–∫ –º–Ω–µ –ª—É—á—à–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"\n` +
          `‚Ä¢ "–ß—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?"\n\n` +
          `–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –Ω–∞—á–Ω—É –≥–∞–¥–∞–Ω–∏–µ!`,
      );
      return;
    }

    if (text.trim() === '') {
      await this.bot.sendMessage(
        chatId,
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º. ` +
          `–ù–∞–ø—Ä–∏–º–µ—Ä: "–ß—Ç–æ –º–Ω–µ –æ–∂–∏–¥–∞—Ç—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?"`,
      );
      return;
    }

    try {
      await this.bot.sendMessage(
        chatId,
        `üîÆ –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞—Å–∫–ª–∞–¥—É –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É: "${text}"\n\n–í—ã–±–∏—Ä–∞—é —Ç—Ä–∏ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã...`,
      );

      const cards = await this.tarotService.getThreeRandomCards();

      let aiResponseResolved = false;
      const aiResponsePromise = this.aiService
        .generateAiResponse(
          [
            {
              role: 'system',
              content:
                `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥.\n` +
                '–ü–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ö–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞ –∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–µ–π —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã.\n' +
                `–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä—ë—Ö –∫–∞—Ä—Ç:\n` +
                cards
                  .map((card) => {
                    const isReversed = card.position === 'reversed';
                    return [
                      `–ù–∞–∑–≤–∞–Ω–∏–µ: ${card.name}`,
                      `–ü–æ–ª–æ–∂–µ–Ω–∏–µ: ${isReversed ? '–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ' : '–ü—Ä—è–º–æ–µ'}`,
                      `–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: ${
                        isReversed
                          ? card.base_interpretation_reversed
                          : card.base_interpretation_upright
                      }`,
                      `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${isReversed ? card.keywords_reversed : card.keywords_upright}`,
                      card.symbolism && `–°–∏–º–≤–æ–ª–∏–∫–∞: ${card.symbolism}`,
                      card.astrological_association &&
                        `–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è: ${card.astrological_association}`,
                    ]
                      .filter(Boolean)
                      .join('\n');
                  })
                  .join('\n\n-----------------\n\n') +
                `\n\n–£—á—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: "${text}".`,
            },
            { role: 'user', content: text },
          ],
          AiProviderBrand.DEEPSEEK,
        )
        .then((response) => {
          aiResponseResolved = true;
          return response;
        });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞
      for (let i = 0; i < cards.length; i++) {
        const card = cards[i];

        setTimeout(async () => {
          if (!aiResponseResolved) {
            await this.bot.sendMessage(
              chatId,
              `üÉè ${card.name} (${card.position === 'reversed' ? '–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è' : '–ü—Ä—è–º–∞—è'})`,
            );
            if (card.image_url) {
              await this.bot.sendPhoto(chatId, card.image_url);
            }
          }

          // –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
          if (i === cards.length - 1 && !aiResponseResolved) {
            setTimeout(async () => {
              if (!aiResponseResolved) {
                await this.bot.sendMessage(
                  chatId,
                  `‚è≥ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ!`,
                );
              }
            }, 1000); // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã
          }
        }, i * 1000);
      }

      // –°–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–∞–¥–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥)
      const waitingMessages = [
        'üîÆ –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ä—Ç—ã –∏ –∏—Ö –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å...',
        'üÉè –ö–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Å–≤–æ–∏ —Ç–∞–π–Ω—ã...',
        '‚ú® –í—Å–µ–ª–µ–Ω–Ω–∞—è —à–µ–ø—á–µ—Ç –æ—Ç–≤–µ—Ç—ã...',
        'üî• –°—É–¥—å–±–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ –¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É...',
      ];

      let index = 0;
      const messageInterval = setInterval(async () => {
        if (aiResponseResolved) {
          clearInterval(messageInterval);
          return;
        }
        await this.bot.sendMessage(
          chatId,
          waitingMessages[index % waitingMessages.length],
        );
        index++;
      }, 15000); // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π

      // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
      const aiResponse = await aiResponsePromise;

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –∏–¥—É—Ç
      clearInterval(messageInterval);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
      await this.bot.sendMessage(
        chatId,
        `üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:\n\n${aiResponse.replace('*', '').replace('#', '')}\n\n` +
          `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –∏—Ö –≤ —á–∞—Ç!`,
      );
    } catch (error) {
      Logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error.stack);
      await this.bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–∞–¥–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑.',
      );
    }
  }
}
